generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String?        @default("user")
  accounts      Account[]
  Conversation  Conversation[]
  Message       Message[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SystemPrompts {
  id         Int       @id @default(autoincrement())
  prompt     String?   @unique @db.VarChar
  likes      Int       @default(0)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  last_used  DateTime? @db.Timestamptz(6)
  used       Int       @default(0)
  dislikes   Int       @default(0)

  @@index([id], map: "ix_SystemPrompts_id")
}

model Source {
  url    String   @id
  Report Report[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  Report         Report[]
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  satirical Boolean   @default(false)
  userId    String
  title     String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Report {
  id        String   @id @default(cuid())
  messageId String
  sourceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  source    Source   @relation(fields: [sourceId], references: [url], onDelete: Cascade)
}
